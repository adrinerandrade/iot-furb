#include <ESP8266WiFi.h>

#define LIGHT_FACTOR 180
#define TIMER_FACTOR 20
#define TIMER_WAIT 100

const char* emailLogin = "richard.curbani.alfarth@hotmail.com";
const char* emailPassword = "2h4cJqTeOSpy";

WiFiClient client;

const char* ssid     = "GL-iNet-866";
const char* password = "goodlife";

char smtp_server[] = "mail.smtp2go.com";
//esta tem que ser a porta do seu provedor que aceita conexões sem criptografia
const int smtp_port = 25; //pode ser 25, 2525 587, 465, etc. Veja com seu provedor de email.

const String mail_username="richard.curbani.alfarth@hotmail.com";
const String mail_password="HNDtKGBblOPT";
const String mail_from="richard.curbani.alfarth@hotmail.com";
const String mail_to="richard.curbani.alfarth@gmail.com";
const String mail_subject="Enviado pelo ESP8266";
const String mail_line1="Esta é a linha 1\n";
const String mail_line2="Esta é a linha 2";
const String mail_line3="Esta é a linha 3";
 
 
bool construindoLinha=false;
const char* _b64_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

void setup() {
  Serial.begin(115200);
  pinMode(D1, OUTPUT);
  delay(10);

  // We start by connecting to a WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  /* Explicitly set the ESP8266 to be a WiFi-client, otherwise, it by default,
     would try to act as both a client and an access-point and could cause
     network-issues with your other WiFi-devices on your WiFi-network. */
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

int lastLight = LOW;
int timer = 0;
void loop() {
  int sensorValue = analogRead(A0);
  Serial.println(sensorValue);
  
  bool hasPresence = sensorValue < LIGHT_FACTOR;
  int lightUp = LOW;
  if (hasPresence) {
    timer = 0;
    lightUp = HIGH;
  } else {
    if (timer > (TIMER_WAIT * TIMER_FACTOR)) {
      timer = (TIMER_WAIT * TIMER_FACTOR);
      lightUp = LOW;
    } else {
      lightUp = HIGH;
    }
  }
  digitalWrite(D1, lightUp);
  if (lastLight != lightUp && lightUp == HIGH) {
    sendEmail();
  }
  delay(TIMER_WAIT);
  timer = timer + TIMER_WAIT;
  lastLight = lightUp;
}

void SEND(String message)
{
  if (!construindoLinha){Serial.print("EU: ");};  //Imprimo apenas no início de cada linha
  Serial.print (message);
  client.print (message);
  construindoLinha=true;
  
}
 
void SENDln(String message)
{
  if (!construindoLinha){Serial.print("EU: ");};  //Imprimo apenas no início de cada linha
  Serial.println (message);
  client.println (message);
  construindoLinha=false;  
}
 
byte sendEmail()
{
  Serial.println("Sending email");
  
  byte thisByte = 0;
  byte respCode;
 
  if (client.connect(smtp_server, smtp_port) == 1) {
    Serial.println("Conectado.");
  } else {
    Serial.println("Falha na conexao.");
    return 0;
  }
  if (!eRcv()) return 0;
 
  char* buf = (char*)malloc(100);
 
  SEND("EHLO ");
  SENDln(smtp_server); 
  if (!eRcv()) return 0;
 
  SENDln("auth login");
  if (!eRcv()) return 0;
 
  base64_encode(buf, mail_username.c_str(), mail_username.length());
  client.println(buf);  
  Serial.println(buf);
  if (!eRcv()) return 0;
  
  base64_encode(buf, mail_password.c_str(), mail_password.length());
  client.println(buf);   
  Serial.println(buf);
  if (!eRcv()) return 0;
  
  SEND("MAIL From: ");
  SENDln(mail_from);
  if (!eRcv()) return 0;
  
  SEND("RCPT To: ");
  SENDln(mail_to);
  if (!eRcv()) return 0;
  
  SENDln("DATA");
  if (!eRcv()) return 0;
  
  SEND("To: ");
  SENDln(mail_to);
  SEND("From: "); 
  SENDln(mail_from); //Este é o "nome para exibição"
  SEND("Subject: ");
  SENDln(mail_subject);
  SENDln(mail_line1);
  SENDln(mail_line2);
  SENDln(mail_line3);
  SENDln("."); //O email tem que terminar assim
  if (!eRcv()) return 0;
 
  SENDln("QUIT");
 
  if (!eRcv()) return 0;
  client.stop();
  Serial.println("Desconectado.");
  return 1;
}
 
byte eRcv()
{
  byte respCode;
  byte thisByte;
  int loopCount = 0;
 
  while (!client.available()) {
    delay(1);
    loopCount++;
    // Se nada for recebido em 10s, desisto.
    if (loopCount > 10000) {
      client.stop();
      Serial.println("\r\nTimeout");
      return 0;
    }
  }
 
  respCode = client.peek();
  while (client.available())
  {
    thisByte = client.read();
    Serial.write(thisByte);
  }
 
  if (respCode >= '4')
  {
    //  efail();
    return 0;
  }
  return 1;
}

void a3_to_a4(unsigned char * a4, unsigned char * a3) {
  a4[0] = (a3[0] & 0xfc) >> 2;
  a4[1] = ((a3[0] & 0x03) << 4) + ((a3[1] & 0xf0) >> 4);
  a4[2] = ((a3[1] & 0x0f) << 2) + ((a3[2] & 0xc0) >> 6);
  a4[3] = (a3[2] & 0x3f);
}
 
int base64_encode(char *output, const char *input, int inputLen) {
  int i = 0, j = 0;
  int encLen = 0;
  unsigned char a3[3];
  unsigned char a4[4];
  while(inputLen--) {
    a3[i++] = *(input++);
    if(i == 3) {
      a3_to_a4(a4, a3);
      for(i = 0; i < 4; i++) {
        output[encLen++] = _b64_alphabet[a4[i]];
      }
      i = 0;
    }
  }
  if(i) {
    for(j = i; j < 3; j++) {
      a3[j] = '\0';
    }
    a3_to_a4(a4, a3);
    for(j = 0; j < i + 1; j++) {
      output[encLen++] = _b64_alphabet[a4[j]];
    }
    while((i++ < 3)) {
      output[encLen++] = '=';
    }
  }
  output[encLen] = '\0';
  return encLen;
}
