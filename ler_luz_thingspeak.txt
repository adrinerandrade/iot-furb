/*
 *  This sketch sends data via HTTP GET requests to data.sparkfun.com service.
 *
 *  You need to get streamId and privateKey at data.sparkfun.com and paste them
 *  below. Or just customize this script to talk to other HTTP servers.
 *
 */
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <string.h>

const char* ssid     = "GL-iNet-866";
const char* password = "goodlife";

const char* host = "api.thingspeak.com";
const char* privateKey = "LGFQ0IBHJYVUNUWY";

void setup() {
  Serial.begin(19200);
  pinMode(D1, OUTPUT);
  delay(10);

  // We start by connecting to a WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  /* Explicitly set the ESP8266 to be a WiFi-client, otherwise, it by default,
     would try to act as both a client and an access-point and could cause
     network-issues with your other WiFi-devices on your WiFi-network. */
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

int value = 0;

DynamicJsonBuffer jsonBuffer;
void loop() {
  delay(100);
  ++value;

  Serial.print("connecting to ");
  Serial.println(host);
  
  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }
  
  // We now create a URI for the request
  String url = "/channels/895180/fields/1.json";
  url += "?results=1&api_key=";
  url += privateKey;

  Serial.println(url);
  
  Serial.print("Requesting URL: ");
  Serial.println(url);
  
  // This will send the request to the server
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }
  
  // Read all the lines of the reply from server and print them to Serial
  while(client.available()){
    String line = client.readStringUntil('\r');
    JsonObject& root = jsonBuffer.parseObject(line);
  
    if (root.success()) {
      String value = root["feeds"][0]["field1"];
      digitalWrite(D1, value == "ON" ? HIGH : LOW);
      Serial.println(value);
    }
  }
  
  Serial.println();
  Serial.println("closing connection");
}
